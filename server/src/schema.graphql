# ==> Merchant

type Merchant {
  id: ID!
  name: String!
  merchantId: String!
  merchantCode: String!
  terminalId: String!
  address: String!
  password: String!
  active: Boolean!
}

type MerchantPage {
  total: Int!
  items: [Merchant]!
}

input CreateMerchantInput {
  name: String!
  merchantCode: String!
  terminalId: String!
  address: String!
  active: Boolean
}

input UpdateMerchantInput {
  name: String
  address: String
  active: Boolean
}

# ==> User

type User {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  merchantId: String
  merchant: Merchant
  active: Boolean!
}

type UserPage {
  total: Int!
  items: [User]!
}

input CreateUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  active: Boolean
  merchantId: String
}

# ==> Client

type Client {
  clientId: String
  msisdn: String
  active: Boolean
}

input UpdateClientInput {
  active: Boolean
}

type ClientPage {
  total: Int!
  page: Int
  items: [Client]!
}

type Card {
  id: ID!
  cardNumber: String
  clientId: String
  active: Boolean
}

# ==> Transaction

type Transaction {
  id: ID!
  type: String
  version: String
  amount: Int
  msisdn: String
  merchantId: String
  createdAt: String
  authCode: String
  respCode: String
  status: String
  trxId: String
}

type TransactionPage {
  next: ID!
  haveMore: Boolean!
  items: [Transaction]!
}

# ==> Misc

type Authentication {
  token: String
  error: String
}

type AkenAuth {
  authenticated: Boolean!
  merchantCode: String
  name: String
}

# ==> Schema

type Query {
  me: User
  users: UserPage!
  merchants: MerchantPage!
  clients(page: Int, pageSize: Int): ClientPage!
  transactions(next: ID, limit: Int): TransactionPage!
  report(merchantId: ID, date: String): [Transaction]!
}

type Mutation {
  aken(merchantId: String!, password: String!): AkenAuth!
  login(email: String!, password: String!): Authentication!
  signup(merchant: CreateUserInput!): Authentication!

  createMerchant(merchant: CreateMerchantInput!): ID
  updateMerchant(id: ID!, merchant: UpdateMerchantInput!): Boolean!
  deleteMerchant(id: ID!): Boolean!

  updateUser(id: ID!, user: UpdateUserInput!): Boolean!

  updateClient(clientId: ID!, client: UpdateClientInput!): Boolean!
}
